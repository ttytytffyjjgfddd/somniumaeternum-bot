import sqlite3
import time
from telebot import TeleBot, types
from os import getenv
from dotenv import load_dotenv

load_dotenv()
API_TOKEN = getenv('API_TOKEN')
bot = TeleBot(API_TOKEN)

# —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def init_db():
    with sqlite3.connect('database.db') as db: # 1 –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        cursor = db.cursor()
        cursor.executescript('''
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY,
                phone TEXT,
                full_name TEXT,
                is_registered INTEGER DEFAULT 0
            );
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY,
                category TEXT,
                name TEXT,
                photo TEXT,
                description TEXT,
                price REAL
            );
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY,
                user_id INTEGER,
                product_id INTEGER,
                delivery_option TEXT,
                payment_method TEXT,
                order_status TEXT DEFAULT 'pending',
                FOREIGN KEY (user_id) REFERENCES users(id),
                FOREIGN KEY (product_id) REFERENCES products(id)
            );
        ''')
        add_sample_products()  # –∑—Ä–∞–∑–∫–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏
        db.commit() # –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –±–¥

def add_sample_products():
    with sqlite3.connect('database.db') as db: # 2 –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        cursor = db.cursor()
        cursor.executescript('''
        delete from products; 
            INSERT INTO products (category, name, photo, description, price) VALUES
                ('–í–ï–†–•', 'Enfants Riches Deprimes Hoodie (Black)', 'https://imgur.com/a/PncjvBO', '–ù–∞–π–∫—Ä–∞—â–∞ —è–∫—ñ—Å—Ç—å 1 –¥–æ 1, —ñ–¥–µ–∞–ª—å–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω—ñ –≤—Å—ñ –±–∏—Ä–∫–∏, –º–∞—î –∞—Ä—Ö—ñ–≤–Ω–∏–π –≤–∏–≥–ª—è–¥. \n–£ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ä–æ–∑–º—ñ—Ä–∏ M, L.', 6800),
                ('–í–ï–†–•', 'Enfants Riches Deprimes Hoodie (Red)', 'https://imgur.com/a/GXOUq8J', '–ù–∞–π–∫—Ä–∞—â–∞ —è–∫—ñ—Å—Ç—å 1 –¥–æ 1, —ñ–¥–µ–∞–ª—å–Ω–æ –≤–∏–∫–æ–Ω–∞–Ω—ñ –≤—Å—ñ –±–∏—Ä–∫–∏, –º–∞—î –∞—Ä—Ö—ñ–≤–Ω–∏–π –≤–∏–≥–ª—è–¥. \n–£ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ä–æ–∑–º—ñ—Ä–∏ S, M.', 7000),
                ('–í–ï–†–•', 'MM6 Archive Logo T-Shirt', 'https://imgur.com/a/wnixDKt', '–ù–∞–π–∫—Ä–∞—â–∞ —è–∫—ñ—Å—Ç—å, —î –≤—Å—ñ –±–∏—Ä–∫–∏, —è–∫—ñ—Å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ —Ç–∞ –ø–æ—à–∏—Ç—Ç—è, —â—ñ–ª—å–Ω–∏–π –ø—Ä–∏–Ω—Ç. –î—É–∂–µ –≥–∞—Ä–Ω–æ –≤–∏–≥–ª—è–¥–∞—î, –ª–µ–≥–∫–æ –ø–æ—î–¥–Ω—É–≤–∞—Ç–∏. \n–£ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ä–æ–∑–º—ñ—Ä–∏ S, M.', 3500),
                ('–ù–ò–ó', 'Yori Sport Wide Grey Sweatpant', 'https://imgur.com/a/BJJignK', '–®–∏—Ä–æ–∫–∏–π –∫—Ä—ñ–π, —Ü—ñ–∫–∞–≤–∏–π –¥–∏–∑–∞–π–Ω, –¥—É–∂–µ –≥–∞—Ä–Ω–æ –≤–∏–≥–ª—è–¥–∞—î –Ω–∞ —Ç—ñ–ª—ñ. \n–£ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ä–æ–∑–º—ñ—Ä S, L.', 4000),
                ('–ù–ò–ó', 'Rick Owens belas grinch drkshdw Jeans', 'https://imgur.com/a/G8d6eEN', '–£ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ —Ä–æ–∑–º—ñ—Ä–∏ S, M.', 5500),
                ('–í–ó–£–¢–¢–Ø', 'Balenciaga 3XL Extreme Lace (Grey)', 'https://imgur.com/a/utDGiYB', '–£ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ 41-43 —Ä–æ–∑–º—ñ—Ä.', 5000),
                ('–í–ó–£–¢–¢–Ø', 'Balenciaga 3XL Extreme Lace (Red)', 'https://imgur.com/a/6stRip8', '–£ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ 40-42 —Ä–æ–∑–º—ñ—Ä.', 5200),
                ('–ê–ö–°–ï–°–£–ê–†–ò', 'Comme Des Gar√ßons bag', 'https://imgur.com/a/rNMiUAe', '–©—ñ–ª—å–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏, –±–∞–≥–∞—Ç–æ –º—ñ—Å—Ü—è –≤ —Å—É–º—Ü—ñ, –º–æ–∂–Ω–∞ –Ω–æ—Å–∏—Ç–∏ —á–µ—Ä–µ–∑ –ø–ª–µ—á–µ, —î –≤—Å—ñ –±–∏—Ä–∫–∏.', 4000),
                ('–ê–ö–°–ï–°–£–ê–†–ò', 'Maison Margiela Braclet', 'https://imgur.com/a/Z46kuy0', '–í–∏–∫–æ–Ω–∞–Ω–æ –∑—ñ —Å—Ä—ñ–±–ª–∞. –†–æ–∑–º—ñ—Ä —Ä–µ–≥—É–ª—é—î—Ç—å—Å—è.', 6000);
        ''')
        db.commit()

# –ø–µ—Ä—à–∞ –∫–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_command(message):
    user_id = message.from_user.id
    with sqlite3.connect('database.db') as db: # 3 –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        cursor = db.cursor()
        cursor.execute("SELECT * FROM users WHERE id=?", (user_id,))
        user = cursor.fetchone()

        if user and user[3]:  # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó
            bot.reply_to(message, "_–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ. –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç._", parse_mode='Markdown')
            show_main_menu(message)
        else:
            bot.reply_to(message, "_–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó. –û–±–æ–≤'—è–∑–∫–æ–≤–æ —É —Ñ–æ—Ä–º–∞—Ç—ñ +380._", parse_mode='Markdown')

# –æ–±—Ä–æ–±–∫–∞ —Ç–µ–ª
@bot.message_handler(func=lambda message: message.text.startswith("+"))
def handle_phone(message):
    user_id = message.from_user.id
    phone = message.text
    
    bot.reply_to(message, "_–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü–Ü–ë._", parse_mode='Markdown')
    bot.register_next_step_handler(message, handle_full_name, phone)

# –æ–±—Ä–æ–±–∫–∞ –ø—ñ–±
def handle_full_name(message, phone):
    full_name = message.text
    user_id = message.from_user.id

    # –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    with sqlite3.connect('database.db') as db: # 4 –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        cursor = db.cursor()
        cursor.execute("INSERT OR REPLACE INTO users (id, phone, full_name, is_registered) VALUES (?, ?, ?, ?)", 
                       (user_id, phone, full_name, 1))
        db.commit()

    bot.reply_to(message, "_–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞! –ü–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç._", parse_mode='Markdown')
    show_main_menu(message)

# –æ—Å–Ω–æ–≤–Ω–µ –º–µ–Ω—é
def show_main_menu(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–ê—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç"), types.KeyboardButton("–†–æ–∑–º—ñ—Ä–Ω–∞ —Å—ñ—Ç–∫–∞"), types.KeyboardButton("–†–æ–∑–º—ñ—Ä–Ω–∞ —Å—ñ—Ç–∫–∞ –¥–ª—è –≤–∑—É—Ç—Ç—è"), types.KeyboardButton("–£–º–æ–≤–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"))
    bot.send_message(message.chat.id, "_–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:_", reply_markup=keyboard, parse_mode='Markdown')

# –≤–∏–±—ñ—Ä –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç
@bot.message_handler(func=lambda message: message.text == "–ê—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç")
def show_catalog_options(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("–í–ï–†–•"), types.KeyboardButton("–ù–ò–ó"), types.KeyboardButton("–í–ó–£–¢–¢–Ø"), types.KeyboardButton("–ê–ö–°–ï–°–£–ê–†–ò"))
    bot.send_message(message.chat.id, "_–û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∞—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç—É:_", reply_markup=keyboard, parse_mode='Markdown')

# –≤–∏–±—ñ—Ä —Ä–æ–∑–º—ñ—Ä–Ω–æ—ó —Å—ñ—Ç–∫–∏
@bot.message_handler(func=lambda message: message.text == "–†–æ–∑–º—ñ—Ä–Ω–∞ —Å—ñ—Ç–∫–∞")
def show_size_chart(message):
    size_chart = (
        "*–†–æ–∑–º—ñ—Ä–Ω–∞ —Å—ñ—Ç–∫–∞ –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –æ–¥—è–≥—É:*\n"
        "\n"
        "_XS: 32-34 (EU)_\n"
        "_S: 36-38 (EU)_\n"
        "_M: 40-42 (EU)_\n"
        "_L: 44-46 (EU)_\n"
        "_XL: 48-50 (EU)_\n"
        "_XXL: 52-54 (EU)_\n"
        "\n"
        "*–í–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è –º–æ–∂—É—Ç—å –≤–∞—Ä—ñ—é–≤–∞—Ç–∏—Å—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–æ–¥–µ–ª—ñ.*"
    )
    bot.reply_to(message, size_chart, parse_mode='Markdown')

# –≤–∏–±—ñ—Ä —Ä–æ–∑–º—ñ—Ä–Ω–æ—ó —Å—ñ—Ç–∫–∏ –¥–ª—è –≤–∑—É—Ç—Ç—è
@bot.message_handler(func=lambda message: message.text == "–†–æ–∑–º—ñ—Ä–Ω–∞ —Å—ñ—Ç–∫–∞ –¥–ª—è –≤–∑—É—Ç—Ç—è")
def show_shoe_size_chart(message):
    shoe_size_chart = (
        "*–†–æ–∑–º—ñ—Ä–Ω–∞ —Å—ñ—Ç–∫–∞ –¥–ª—è –≤–∑—É—Ç—Ç—è:*\n"
        "\n"
        "_36: 22.5 —Å–º_\n"
        "_37: 23.5 —Å–º_\n"
        "_38: 24.0 —Å–º_\n"
        "_39: 25.0 —Å–º_\n"
        "_40: 25.5 —Å–º_\n"
        "_41: 26.5 —Å–º_\n"
        "_42: 27.0 —Å–º_\n"
        "_43: 28.0 —Å–º_\n"
        "_44: 29.0 —Å–º_\n"
        "_45: 29.5 —Å–º_\n"
        "_46: 30.5 —Å–º_\n"
        "\n"
        "*–í–∏–º—ñ—Ä—é–≤–∞–Ω–Ω—è –º–æ–∂—É—Ç—å –≤–∞—Ä—ñ—é–≤–∞—Ç–∏—Å—è –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –º–æ–¥–µ–ª—ñ.*"
    )
    bot.reply_to(message, shoe_size_chart, parse_mode='Markdown')

# –≤–∏–±—ñ—Ä —É–º–æ–≤–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
@bot.message_handler(func=lambda message: message.text == "–£–º–æ–≤–∏ –¥–æ—Å—Ç–∞–≤–∫–∏")
def show_delivery_terms(message):
    delivery_terms = (
        "*–£–º–æ–≤–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:*\n"
        "\n"
        "*1. –£–∫—Ä–ø–æ—à—Ç–∞:* —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ (_3-7 –¥–Ω—ñ–≤_).\n"
        "*2. –ù–æ–≤–∞ –ü–æ—à—Ç–∞:* —à–≤–∏–¥–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ (_1-2 –¥–Ω—ñ_).\n"
        "*3. –ú—ñ—Å—Ç –ü–æ—à—Ç–∞:* –¥–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –≤—ñ–¥–¥—ñ–ª–µ–Ω–Ω—è (_2-5 –¥–Ω—ñ–≤_).\n"
        "\n"
        "_–í–∞—Ä—Ç—ñ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –∫–æ–º–ø–∞–Ω—ñ—ó —Ç–∞ –º—ñ—Å—Ü—è –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è._"
    )
    bot.reply_to(message, delivery_terms, parse_mode='Markdown')

# –≤–∏–±—ñ—Ä –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
@bot.message_handler(func=lambda message: message.text in ["–í–ï–†–•", "–ù–ò–ó", "–í–ó–£–¢–¢–Ø", "–ê–ö–°–ï–°–£–ê–†–ò"])
def show_products(message):
    category = message.text
    with sqlite3.connect('database.db') as db: # –æ—Å—Ç–∞–Ω–Ω—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        cursor = db.cursor()
        cursor.execute("SELECT * FROM products WHERE category=?", (category,))
        products = cursor.fetchall()
        
        if products:
            for product in products:
                # —ñ–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥ —Ç–æ–≤–∞—Ä–æ–º
                keyboard = types.InlineKeyboardMarkup()
                order_button = types.InlineKeyboardButton("üõí –ó–ê–ú–û–í–ò–¢–ò", callback_data=f"order_{product[0]}")  # product[0] - –∞–π–¥—ñ —Ç–æ–≤–∞—Ä—É
                keyboard.add(order_button)
                
                # –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –∑ –æ–ø–∏—Å–æ–º —Ç–æ–≤–∞—Ä—É
                bot.send_photo(message.chat.id, product[3], caption=f"{product[2]}\n{product[4]}\n–¶—ñ–Ω–∞: {product[5]}", reply_markup=keyboard)
                time.sleep(0.5)
        else:
            bot.reply_to(message, "")

    # –∫–Ω–æ–ø–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton("üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é"))
    bot.send_message(message.chat.id, "_–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å._", reply_markup=keyboard, parse_mode='Markdown')

# –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è –∫–Ω–æ–ø–∫–∏ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é
@bot.message_handler(func=lambda message: message.text == "üîô –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –Ω–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é")
def back_to_main_menu(message):
    show_main_menu(message)

# –æ–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
@bot.callback_query_handler(func=lambda call: call.data.startswith("order_"))
def handle_order(call):
    product_id = call.data.split("_")[1]  # –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–π–¥—ñ —Ç–æ–≤–∞—Ä—É
    user_id = call.from_user.id

    bot.answer_callback_query(call.id, "–¢–æ–≤–∞—Ä –¥–æ–¥–∞–Ω–æ!")
    bot.send_message(call.from_user.id, f"–í–∏ –∑–∞–º–æ–≤–∏–ª–∏ —Ç–æ–≤–∞—Ä –∑ ID: {product_id}. –û—á—ñ–∫—É–π—Ç–µ –Ω–∞ –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫ –≤—ñ–¥ –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –î—è–∫—É—î–º–æ.")

# –∑–∞–ø—É—Å–∫ –±–ª–æ–∫
if __name__ == '__main__':
    init_db() # —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–¥
    bot.polling() # –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
